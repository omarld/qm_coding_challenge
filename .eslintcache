[{"D:\\devhome\\qm_coding_challenge\\src\\components\\SessionSearch.js":"1","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Constants.js":"2","D:\\devhome\\qm_coding_challenge\\src\\components\\Row\\Row.js":"3","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Option\\Option.js":"4","D:\\devhome\\qm_coding_challenge\\src\\Services\\SqlService.js":"5","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Dropdown.js":"6","D:\\devhome\\qm_coding_challenge\\src\\store\\appReducer.js":"7","D:\\devhome\\qm_coding_challenge\\src\\index.js":"8","D:\\devhome\\qm_coding_challenge\\src\\App.js":"9","D:\\devhome\\qm_coding_challenge\\src\\components\\Shared\\Button\\Button.js":"10","D:\\devhome\\qm_coding_challenge\\src\\store\\store.js":"11","D:\\devhome\\qm_coding_challenge\\src\\components\\SqlPanel\\SqlPanel.js":"12","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Utils.js":"13"},{"size":3701,"mtime":1609163310406,"results":"14","hashOfConfig":"15"},{"size":1035,"mtime":1608902724567,"results":"16","hashOfConfig":"15"},{"size":6728,"mtime":1609162914785,"results":"17","hashOfConfig":"15"},{"size":390,"mtime":1608912992272,"results":"18","hashOfConfig":"15"},{"size":1234,"mtime":1608917231687,"results":"19","hashOfConfig":"15"},{"size":3547,"mtime":1609114172184,"results":"20","hashOfConfig":"15"},{"size":998,"mtime":1609163147218,"results":"21","hashOfConfig":"15"},{"size":571,"mtime":1608734698831,"results":"22","hashOfConfig":"15"},{"size":311,"mtime":1609086547113,"results":"23","hashOfConfig":"15"},{"size":527,"mtime":1609090277435,"results":"24","hashOfConfig":"15"},{"size":224,"mtime":1609111053509,"results":"25","hashOfConfig":"15"},{"size":338,"mtime":1609162140553,"results":"26","hashOfConfig":"15"},{"size":350,"mtime":1609163381168,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"19tj54b",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"D:\\devhome\\qm_coding_challenge\\src\\components\\SessionSearch.js",["57"],"import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Row from 'components/Row/Row';\nimport styles from './SessionSearch.module.scss';\nimport Button  from  'components/Shared/Button/Button';\nimport SqlPanel from 'components/SqlPanel/SqlPanel';\n\nimport Utils from 'Lib/Utils';\nimport { getAllConditions } from 'Services/SqlService';\n\nexport class SessionSearch extends Component {\n\n    constructor(props){\n        super(props);\n        this.conditions = getAllConditions();\n        this.maxRowsAllowed  =  this.conditions.length;\n        this.state = {\n            rowCount:  1,\n            rowConditions: [{\n                key:  \"1\",\n                conditions:  this.conditions\n            }],\n            sqlString: null\n        }\n\n        this.onSearchClick = this.onSearchClick.bind(this);\n        this.onResetClick = this.onResetClick(this);\n    }\n\n    onAndClick = () =>{\n        if(this.state.rowCount === this.maxRowsAllowed) return;\n\n        const rowCount = this.state.rowCount + 1;\n        const newRows =   [...this.state.rowConditions];\n        newRows.push({\n            key:  rowCount + \"\",\n            conditions:  this.conditions\n        });\n\n        this.setState({\n            rowCount,\n            rowConditions: newRows\n        });\n    }\n\n    onRemoveRow = (index) =>{\n        if(index < 0 || this.state.rowCount === 1 )  return;\n\n        const rowCount = this.state.rowCount - 1;\n        const newRows =   [...this.state.rowConditions];\n        newRows.splice(index, 1, {});\n        this.setState({\n            rowCount,\n            rowConditions: newRows\n        })\n\n        //delete from redux store by using empty selected object\n        this.props.dispatchSelectedCondition({index, selected: {}});\n    }\n\n    onSearchClick (){\n       this.setState({sqlString: Utils.formatSql(this.props.clauses)});\n    }\n\n    onResetClick(){\n        console.log(\"reset!\");\n    }\n\n    render() {\n        const disableAndBtn = this.state.rowCount === this.maxRowsAllowed ? \"disabled\": null;\n        \n        return (\n            <section className={styles.mainContent} aria-label=\"search fields\">\n                <div className={styles.rowsContainer}>\n                    {this.state.rowConditions.map((row, index) => {\n                        if(row && row.conditions){\n                            return <Row key={index} index={index} conditions={row.conditions} onRemoveRow={() => this.onRemoveRow(index)}/>\n                        }\n                        }\n                    )}\n                </div>\n                <div className={styles.addBtnContainer}>\n                    <Button color=\"primary\" size=\"mid\" onClick={this.onAndClick} disabled={disableAndBtn}>And</Button>\n                </div>\n                <div>\n                    {(this.state.rowCount === this.maxRowsAllowed)  ? \n                    <span>Max Conditions Reached!</span>:  null}\n                </div>\n                <hr/>\n                <div>\n                    <Button color=\"primary\" size=\"mid\" onClick={this.onSearchClick} disabled={disableAndBtn}>Search</Button>\n                    <Button size=\"mid\" onClick={this.onResetClick} disabled={disableAndBtn}>Reset</Button>\n                </div>\n                <SqlPanel results={this.state.sqlString}/>\n                \n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        clauses: state.clauses\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        dispatchSelectedCondition: selected =>{\n            dispatch({type: \"UPDATE_SQL_CLAUSE\", value: selected});\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SessionSearch);","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Constants.js",[],["58","59"],"D:\\devhome\\qm_coding_challenge\\src\\components\\Row\\Row.js",["60"],"D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Option\\Option.js",[],"D:\\devhome\\qm_coding_challenge\\src\\Services\\SqlService.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Dropdown.js",[],"D:\\devhome\\qm_coding_challenge\\src\\store\\appReducer.js",[],"D:\\devhome\\qm_coding_challenge\\src\\index.js",[],"D:\\devhome\\qm_coding_challenge\\src\\App.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Shared\\Button\\Button.js",[],"D:\\devhome\\qm_coding_challenge\\src\\store\\store.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\SqlPanel\\SqlPanel.js",[],"D:\\devhome\\qm_coding_challenge\\src\\Lib\\Utils.js",["61"],"\nconst formatSql = (clause) =>{\n    if(!clause || !Array.isArray(clause)) return;\n\n    let sqlString = \n`\nselect * from session where\n`;\n    clause.forEach((item, index) =>{\n        if(item){\n            console.log(item);\n            sqlString += ` soemthing\n            `\n        }\n    });\n\n    return sqlString;\n}\n\nexport default {\n    formatSql\n}",{"ruleId":"62","severity":1,"message":"63","line":75,"column":64,"nodeType":"64","messageId":"65","endLine":75,"endColumn":66},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":124,"column":21,"nodeType":"72","endLine":124,"endColumn":62},{"ruleId":"73","severity":1,"message":"74","line":20,"column":1,"nodeType":"75","endLine":22,"endColumn":2},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-native-reassign",["76"],"no-negated-in-lhs",["77"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]