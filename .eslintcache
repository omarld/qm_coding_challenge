[{"D:\\devhome\\qm_coding_challenge\\src\\components\\SessionSearch.js":"1","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Constants.js":"2","D:\\devhome\\qm_coding_challenge\\src\\components\\Row\\Row.js":"3","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Option\\Option.js":"4","D:\\devhome\\qm_coding_challenge\\src\\Services\\SqlService.js":"5","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Dropdown.js":"6","D:\\devhome\\qm_coding_challenge\\src\\store\\appReducer.js":"7","D:\\devhome\\qm_coding_challenge\\src\\index.js":"8","D:\\devhome\\qm_coding_challenge\\src\\App.js":"9","D:\\devhome\\qm_coding_challenge\\src\\components\\Shared\\Button\\Button.js":"10"},{"size":1128,"mtime":1609088457058,"results":"11","hashOfConfig":"12"},{"size":1035,"mtime":1608902724567,"results":"13","hashOfConfig":"12"},{"size":3045,"mtime":1609085373727,"results":"14","hashOfConfig":"12"},{"size":390,"mtime":1608912992272,"results":"15","hashOfConfig":"12"},{"size":1234,"mtime":1608917231687,"results":"16","hashOfConfig":"12"},{"size":4731,"mtime":1608916775291,"results":"17","hashOfConfig":"12"},{"size":487,"mtime":1608907612772,"results":"18","hashOfConfig":"12"},{"size":571,"mtime":1608734698831,"results":"19","hashOfConfig":"12"},{"size":311,"mtime":1609086547113,"results":"20","hashOfConfig":"12"},{"size":477,"mtime":1609088443215,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19tj54b",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\devhome\\qm_coding_challenge\\src\\components\\SessionSearch.js",[],"D:\\devhome\\qm_coding_challenge\\src\\Lib\\Constants.js",[],["44","45"],"D:\\devhome\\qm_coding_challenge\\src\\components\\Row\\Row.js",["46"],"import React, { useState, useEffect } from 'react';\nimport Dropdown from 'components/Dropdown/Dropdown';\n\nimport styles from './Row.module.scss';\n\nimport {getConditionByKey} from 'Services/SqlService';\n\nexport const Row = (props) =>{\n    const { conditions } = props;\n\n    const [selected, setSelected] = useState({});\n\n    useEffect(() =>{\n        const selected = {\n            condition: conditions[0],\n            selectedOperator: conditions[0].operators[0],\n            operators: conditions[0].operators\n        }\n        setSelected(selected);\n    }, []);\n\n    const onSelectHandler = (item) =>{\n        const condition = getConditionByKey(item.key);\n        const selected = {\n            condition,\n            selectedOperator: condition.operators[0],\n            operators: condition.operators\n        }\n        setSelected(selected);\n    }\n\n    const renderPrePostConditionTemplate = (condition, type) =>{\n        return (\n            <div>\n                {condition && <span className={styles.prePostCondition}>{condition}</span> }\n                {!condition && <input placeholder=\"some input\" type={type}/> }\n            </div>\n        )\n    }\n\n    const onOperatorSelectHandler = (item) =>{\n        console.log(item);\n        const temp = {\n            ...selected,\n            selectedOperator: item\n        }\n        console.log(temp);\n        setSelected(temp);\n    }\n\n    return(\n        <div className={styles.mainRow}>\n            <div className={styles.remove}>X</div>\n            <div>\n                <Dropdown \n                    options={conditions} \n                    defaultSelectedIndex={0}\n                    onSelectHandler={onSelectHandler}/>\n            </div>\n            {(selected.selectedOperator && selected.selectedOperator.preCondition) ? \n                renderPrePostConditionTemplate(selected.selectedOperator.preCondition, selected.condition.type) \n                : null\n            }\n            {(selected.operators && selected.operators.preCondition) ? \n                renderPrePostConditionTemplate() \n                : null\n            }\n            <Dropdown\n                options={selected.operators}\n                defaultSelectedIndex={0}\n                onSelectHandler={onOperatorSelectHandler}/>\n            {(selected.selectedOperator && selected.selectedOperator.postCondition) ? \n                <input placeholder=\"between input\" type={selected.condition.type}/> \n                : null\n            }\n\n            {(selected.selectedOperator && selected.selectedOperator.postCondition) ? \n                renderPrePostConditionTemplate(selected.selectedOperator.postCondition, selected.condition.type) \n                : null\n            }\n           \n            {(selected.operators && selected.operators.postCondition) ? \n                renderPrePostConditionTemplate() \n                : null\n            }\n\n            {selected.condition && <input placeholder=\"always input\" type={selected.condition.type}/> }\n            \n        </div>\n    )\n}\n\nexport default Row;","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Option\\Option.js",[],"D:\\devhome\\qm_coding_challenge\\src\\Services\\SqlService.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Dropdown.js",[],"D:\\devhome\\qm_coding_challenge\\src\\store\\appReducer.js",[],"D:\\devhome\\qm_coding_challenge\\src\\index.js",[],"D:\\devhome\\qm_coding_challenge\\src\\App.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Shared\\Button\\Button.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":20,"column":8,"nodeType":"53","endLine":20,"endColumn":10,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'conditions'. Either include it or remove the dependency array.","ArrayExpression",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},"Update the dependencies array to be: [conditions]",{"range":"60","text":"61"},[559,561],"[conditions]"]