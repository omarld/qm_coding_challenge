[{"D:\\devhome\\qm_coding_challenge\\src\\components\\SessionSearch.js":"1","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Constants.js":"2","D:\\devhome\\qm_coding_challenge\\src\\components\\Row\\Row.js":"3","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Option\\Option.js":"4","D:\\devhome\\qm_coding_challenge\\src\\Services\\SqlService.js":"5","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Dropdown.js":"6","D:\\devhome\\qm_coding_challenge\\src\\store\\appReducer.js":"7","D:\\devhome\\qm_coding_challenge\\src\\index.js":"8","D:\\devhome\\qm_coding_challenge\\src\\App.js":"9","D:\\devhome\\qm_coding_challenge\\src\\components\\Shared\\Button\\Button.js":"10","D:\\devhome\\qm_coding_challenge\\src\\store\\store.js":"11","D:\\devhome\\qm_coding_challenge\\src\\components\\SqlPanel\\SqlPanel.js":"12","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Utils.js":"13"},{"size":4031,"mtime":1609173117486,"results":"14","hashOfConfig":"15"},{"size":1054,"mtime":1609165982904,"results":"16","hashOfConfig":"15"},{"size":7092,"mtime":1609171855911,"results":"17","hashOfConfig":"15"},{"size":390,"mtime":1608912992272,"results":"18","hashOfConfig":"15"},{"size":1234,"mtime":1609171463261,"results":"19","hashOfConfig":"15"},{"size":3547,"mtime":1609114172184,"results":"20","hashOfConfig":"15"},{"size":998,"mtime":1609163147218,"results":"21","hashOfConfig":"15"},{"size":571,"mtime":1608734698831,"results":"22","hashOfConfig":"15"},{"size":243,"mtime":1609173099918,"results":"23","hashOfConfig":"15"},{"size":607,"mtime":1609172863701,"results":"24","hashOfConfig":"15"},{"size":224,"mtime":1609111053509,"results":"25","hashOfConfig":"15"},{"size":287,"mtime":1609165305584,"results":"26","hashOfConfig":"15"},{"size":2494,"mtime":1609171658355,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"19tj54b",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\devhome\\qm_coding_challenge\\src\\components\\SessionSearch.js",["56","57"],"D:\\devhome\\qm_coding_challenge\\src\\Lib\\Constants.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Row\\Row.js",["58"],"import React, {Component} from 'react';\nimport { connect } from 'react-redux'\nimport Dropdown from 'components/Dropdown/Dropdown';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport styles from './Row.module.scss';\n\nimport {getConditionByKey} from 'Services/SqlService';\n\nclass Row extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedPredicate: null,\n            condition: null,\n            selectedOperator: null,\n            operators: null,\n            preConditionInputValue: '',\n            postConditionInputValue: ''\n        }\n\n        this.onSelectHandler = this.onSelectHandler.bind(this);\n        this.onClickRemove = this.onClickRemove.bind(this);\n        this.onOperatorSelectHandler = this.onOperatorSelectHandler.bind(this); \n        this.onPreconditionChange = this.onPreconditionChange.bind(this);\n        this.onPostconditionChange = this.onPostconditionChange.bind(this);\n    }\n\n    componentDidMount() {\n        const selected = {\n            condition: this.props.conditions[0],\n            selectedOperator: this.props.conditions[0].operators[0],\n            operators: this.props.conditions[0].operators,\n            selectedPredicate: this.props.conditions[0].key\n        }\n        this.setState(selected);\n\n        const clause = {\n            selectedPredicate: this.props.conditions[0].key,\n            selectedOperator: this.props.conditions[0].operators[0],\n            preConditionInputValue: this.state.preConditionInputValue,\n            postConditionInputValue: this.state.postConditionInputValue,\n            type: this.props.conditions[0].type,\n            index: this.props.index\n        };\n        this.props.dispatchSelectedCondition({index: this.props.index, clause});\n    }\n\n    onSelectHandler(item) {\n        const condition = getConditionByKey(item.key);\n        const selected = {\n            condition,\n            selectedOperator: condition.operators[0],\n            operators: condition.operators,\n            selectedPredicate: condition.key\n        }\n\n        const clause = {\n            selectedPredicate: condition.key,\n            selectedOperator: condition.operators[0],\n            preConditionInputValue: this.state.preConditionInputValue,\n            postConditionInputValue: this.state.postConditionInputValue,\n            type: condition.operators[0],\n            index: this.props.index\n        };\n        this.props.dispatchSelectedCondition({index: this.props.index, clause});\n        this.setState(selected);\n    }\n\n    onOperatorSelectHandler(item){\n        const temp = {\n            selectedOperator: item\n        }\n        const clause = {\n            selectedPredicate: this.state.condition.key,\n            selectedOperator: item,\n            preConditionInputValue: this.state.preConditionInputValue,\n            postConditionInputValue: this.state.postConditionInputValue,\n            type: this.state.condition.key,\n            index: this.props.index\n        };\n        this.props.dispatchSelectedCondition({index: this.props.index, clause});\n        this.setState(temp);\n    }\n\n    onClickRemove (event) {\n        event.preventDefault();\n        if(this.props.onRemoveRow && typeof this.props.onRemoveRow === \"function\"){\n            this.props.onRemoveRow();\n        }\n    }\n\n    onPreconditionChange(event){\n        this.setState({\n            preConditionInputValue: event.target.value\n        });\n        this.dispatchSelected(event.target.value, this.state.postConditionInputValue);\n    }\n\n    onPostconditionChange(event){\n        this.setState({\n            postConditionInputValue: event.target.value\n        });\n        this.dispatchSelected(this.state.preConditionInputValue, event.target.value);\n    }\n\n    dispatchSelected(preConditionValue, postConditionValue) {\n        const clause = {\n            selectedPredicate: this.state.selectedPredicate,\n            selectedOperator: this.state.selectedOperator,\n            preConditionInputValue: preConditionValue,\n            postConditionInputValue: postConditionValue,\n            type: this.state.condition.type,\n            index: this.props.index\n        };\n        this.props.dispatchSelectedCondition({index: this.props.index, clause});\n    }\n\n    render(){\n        let preInputName = null, postInputName = null;\n        if(this.state.selectedPredicate && this.state.selectedOperator){\n            preInputName = `preInput-${this.state.selectedPredicate}-${this.state.selectedOperator.value}-${this.props.index}`;\n            postInputName = `postInput-${this.state.selectedPredicate}-${this.state.selectedOperator.value}-${this.props.index}`;\n        }\n        \n\n        return(\n            <div className={styles.mainRow}>\n                <div className={styles.remove}>\n                    <a href=\"#\" onClick={this.onClickRemove}><FontAwesomeIcon icon={faTrashAlt} /></a>\n                </div>\n                <div className={styles.inputContainers}>\n                    <Dropdown \n                            options={this.props.conditions} \n                            defaultSelectedIndex={0}\n                            onSelectHandler={this.onSelectHandler}/>\n                   \n                    {(this.state.selectedOperator && this.state.selectedOperator.preCondition) ? \n                        <span className={styles.prePostCondition}>{this.state.selectedOperator.preCondition}</span> \n                        : null\n                    }\n\n                    <Dropdown\n                        options={this.state.operators}\n                        defaultSelectedIndex={0}\n                        onSelectHandler={this.onOperatorSelectHandler}/>\n\n                    {(this.state.selectedOperator && this.state.selectedOperator.preCondition) ? \n                        <input placeholder=\"between input\" \n                            name={preInputName} \n                            value={this.state.preConditionInputValue}\n                            onChange={this.onPreconditionChange} \n                            type={this.state.condition.type}/> \n                        : null\n                    }\n    \n                    {(this.state.selectedOperator && this.state.selectedOperator.postCondition) ? \n                        <span className={styles.prePostCondition}>{this.state.selectedOperator.postCondition}</span>\n                        : null\n                    }\n    \n                    {this.state.condition && <input name={postInputName} placeholder=\"always input\"\n                        value={this.state.postConditionInputValue}\n                        onChange={this.onPostconditionChange} \n                        type={this.state.condition.type}/> }\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        dispatchSelectedCondition: selected =>{\n            dispatch({type: \"UPDATE_SQL_CLAUSE\", value: selected});\n        }\n    }\n};\n\nexport default connect(null, mapDispatchToProps)(Row);","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Option\\Option.js",[],"D:\\devhome\\qm_coding_challenge\\src\\Services\\SqlService.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Dropdown.js",[],["59","60"],"D:\\devhome\\qm_coding_challenge\\src\\store\\appReducer.js",[],"D:\\devhome\\qm_coding_challenge\\src\\index.js",[],"D:\\devhome\\qm_coding_challenge\\src\\App.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Shared\\Button\\Button.js",[],"D:\\devhome\\qm_coding_challenge\\src\\store\\store.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\SqlPanel\\SqlPanel.js",[],"D:\\devhome\\qm_coding_challenge\\src\\Lib\\Utils.js",["61"],{"ruleId":"62","severity":1,"message":"63","line":78,"column":64,"nodeType":"64","messageId":"65","endLine":78,"endColumn":66},{"ruleId":"66","severity":1,"message":"67","line":97,"column":68,"nodeType":"68","endLine":97,"endColumn":77},{"ruleId":"69","severity":1,"message":"70","line":131,"column":21,"nodeType":"71","endLine":131,"endColumn":62},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":68,"column":1,"nodeType":"78","endLine":70,"endColumn":2},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["79"],"no-negated-in-lhs",["80"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]