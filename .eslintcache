[{"D:\\devhome\\qm_coding_challenge\\src\\components\\SessionSearch.js":"1","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Constants.js":"2","D:\\devhome\\qm_coding_challenge\\src\\components\\Row\\Row.js":"3","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Option\\Option.js":"4","D:\\devhome\\qm_coding_challenge\\src\\Services\\SqlService.js":"5","D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Dropdown.js":"6","D:\\devhome\\qm_coding_challenge\\src\\store\\appReducer.js":"7","D:\\devhome\\qm_coding_challenge\\src\\index.js":"8","D:\\devhome\\qm_coding_challenge\\src\\App.js":"9","D:\\devhome\\qm_coding_challenge\\src\\components\\Shared\\Button\\Button.js":"10","D:\\devhome\\qm_coding_challenge\\src\\store\\store.js":"11","D:\\devhome\\qm_coding_challenge\\src\\components\\SqlPanel\\SqlPanel.js":"12","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Utils.js":"13"},{"size":4395,"mtime":1609177545432,"results":"14","hashOfConfig":"15"},{"size":1054,"mtime":1609165982904,"results":"16","hashOfConfig":"15"},{"size":7582,"mtime":1609178593675,"results":"17","hashOfConfig":"15"},{"size":390,"mtime":1608912992272,"results":"18","hashOfConfig":"15"},{"size":1234,"mtime":1609171463261,"results":"19","hashOfConfig":"15"},{"size":3734,"mtime":1609177407348,"results":"20","hashOfConfig":"15"},{"size":996,"mtime":1609175043651,"results":"21","hashOfConfig":"15"},{"size":571,"mtime":1608734698831,"results":"22","hashOfConfig":"15"},{"size":243,"mtime":1609173099918,"results":"23","hashOfConfig":"15"},{"size":607,"mtime":1609172863701,"results":"24","hashOfConfig":"15"},{"size":224,"mtime":1609111053509,"results":"25","hashOfConfig":"15"},{"size":287,"mtime":1609165305584,"results":"26","hashOfConfig":"15"},{"size":2499,"mtime":1609175120676,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"19tj54b",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"D:\\devhome\\qm_coding_challenge\\src\\components\\SessionSearch.js",["57","58"],"import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport Row from 'components/Row/Row';\nimport styles from './SessionSearch.module.scss';\nimport Button  from  'components/Shared/Button/Button';\nimport SqlPanel from 'components/SqlPanel/SqlPanel';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Utils from 'Lib/Utils';\nimport { getAllConditions } from 'Services/SqlService';\n\nexport class SessionSearch extends Component {\n\n    constructor(props){\n        super(props);\n        this.conditions = getAllConditions();\n        this.maxRowsAllowed  =  this.conditions.length;\n        this.state = {\n            rowCount:  1,\n            rowConditions: [{\n                key:  \"1\",\n                conditions:  this.conditions\n            }],\n            toggleReset: false,\n            sqlString: null\n        }\n\n        this.onSearchClick = this.onSearchClick.bind(this);\n        this.onResetClick = this.onResetClick.bind(this);\n    }\n\n    onAndClick = () =>{\n        if(this.state.rowCount === this.maxRowsAllowed) return;\n\n        const rowCount = this.state.rowCount + 1;\n        const newRows =   [...this.state.rowConditions];\n        newRows.push({\n            key:  rowCount + \"\",\n            conditions:  this.conditions\n        });\n\n        this.setState({\n            rowCount,\n            rowConditions: newRows\n        });\n    }\n\n    onRemoveRow = (index) =>{\n        if(index < 0 || this.state.rowCount === 1 )  return;\n\n        const rowCount = this.state.rowCount - 1;\n        const newRows =   [...this.state.rowConditions];\n        newRows.splice(index, 1, {});\n        this.setState({\n            rowCount,\n            rowConditions: newRows\n        })\n\n        //delete from redux store by using empty selected object\n        this.props.dispatchSelectedCondition({index, selected: {}});\n    }\n\n    onSearchClick (){\n       this.setState({sqlString: Utils.sqlBuilder(this.props.clauses)});\n    }\n\n    onResetClick(){\n        this.setState({\n            rowCount: 1,\n            rowConditions: [{\n                key:  \"1\",\n                conditions:  this.conditions\n            }],\n            toggleReset: !this.state.toggleReset,\n            sqlString: ''\n        });\n\n        //index null is to clear all\n        this.props.dispatchSelectedCondition({index: null, selected: {}});\n    }\n\n    render() {\n        const disableAndBtn = this.state.rowCount === this.maxRowsAllowed ? \"disabled\": null;\n        \n        return (\n            <section className={styles.mainContent} aria-label=\"search fields\">\n                <h1>Search for Sessions</h1>\n                <div className={styles.rowsContainer}>\n                    {this.state.rowConditions.map((row, index) => {\n                        if(row && row.conditions){\n                            return <Row key={index} reset={this.state.toggleReset} index={index} conditions={row.conditions} onRemoveRow={() => this.onRemoveRow(index)}/>\n                        }\n                        }\n                    )}\n                </div>\n                <div className={styles.addBtnContainer}>\n                    <Button color=\"primary\" size=\"mid\" onClick={this.onAndClick} disabled={disableAndBtn}>And</Button>\n                </div>\n                <div>\n                    {(this.state.rowCount === this.maxRowsAllowed)  ? \n                    <span>Max Conditions Reached!</span>:  null}\n                </div>\n                <hr/>\n                <div className={styles.searchResetButtons}>\n                    <Button color=\"primary\" className={styles.searchButton} size=\"lg\" onClick={this.onSearchClick} disabled={disableAndBtn}>\n                    <FontAwesomeIcon icon={faSearch} /> Search\n                    </Button>\n                    <Button size=\"mid\" onClick={this.onResetClick} size=\"lg\">Reset</Button>\n                </div>\n                <SqlPanel results={this.state.sqlString}/>\n            </section>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        clauses: state.clauses\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        dispatchSelectedCondition: selected =>{\n            dispatch({type: \"UPDATE_SQL_CLAUSE\", value: selected});\n        }\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SessionSearch);","D:\\devhome\\qm_coding_challenge\\src\\Lib\\Constants.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Row\\Row.js",["59","60","61","62"],"D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Option\\Option.js",[],"D:\\devhome\\qm_coding_challenge\\src\\Services\\SqlService.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Dropdown\\Dropdown.js",["63"],"D:\\devhome\\qm_coding_challenge\\src\\store\\appReducer.js",[],"D:\\devhome\\qm_coding_challenge\\src\\index.js",[],["64","65"],"D:\\devhome\\qm_coding_challenge\\src\\App.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\Shared\\Button\\Button.js",[],"D:\\devhome\\qm_coding_challenge\\src\\store\\store.js",[],"D:\\devhome\\qm_coding_challenge\\src\\components\\SqlPanel\\SqlPanel.js",[],"D:\\devhome\\qm_coding_challenge\\src\\Lib\\Utils.js",["66"],"\nconst OPERATOR_TO_STRING = {\n    \"equals\": \"=\",\n    \"contains\": \"LIKE\",\n    \"starts with\": \"LIKE\",\n    \"in list\": \"IN\",\n    \"between\": \"BETWEEN\",\n    \"greater than\": \">\",\n    \"less than\": \"<\"\n}\n\nconst sqlBuilder = (clause) =>{\n    if(!clause || !Array.isArray(clause)) return '';\n\n    let counter = 0;\n    let sqlString = \n`\nSELECT id, user_email, user_first_name, user_last_name, screen_width, screen_height,\nvisits, page_response, domain, path \nFROM session`;\n\n    clause.forEach((item, index) =>{\n        if(item){\n            const and = counter === 0 ? 'WHERE' : 'AND';\n            let postConditionValue = null;\n\n            let preConditionValue = null;\n            if(item.selectedOperator && item.selectedOperator.preCondition){\n                preConditionValue = item.type === \"number\" ? `${item.preConditionInputValue} AND` : `'${item.preConditionInputValue}' AND`\n            }\n\n            switch(item.selectedOperator.value){\n                case 'contains':\n                    postConditionValue = `'%${item.postConditionInputValue}%'`;\n                    break;\n                case 'starts with':\n                    postConditionValue = `'${item.postConditionInputValue}%'`;\n                    break;\n                case 'in list':\n                        const inList = item.postConditionInputValue.split(' ');\n                        postConditionValue = '(';\n\n                        inList.forEach((str, index) =>{\n\n                            //prefer this approach rather than nesting if conditions. Easier to read\n                            if(str && str !== '' && item.type === \"number\"){\n                                postConditionValue += (index === inList.length -1) ? `${str}`: `${str},`;   \n                            } else if(str && str !== ''){\n                                postConditionValue += (index === inList.length -1) ? `'${str}'`: `'${str}',`\n                            }\n                        });\n                        postConditionValue += ')';\n                        break;\n                default:\n                    postConditionValue = item.type === \"number\" ? item.postConditionInputValue : `'${item.postConditionInputValue}'`;\n            }\n            \n            sqlString += `\n${and} ${item.selectedPredicate} ${OPERATOR_TO_STRING[item.selectedOperator.value]} ${preConditionValue || ''} ${postConditionValue}`;\n            \n            counter++;\n        }\n    });\n\n    return sqlString;\n}\n\nexport default {\n    sqlBuilder\n}",{"ruleId":"67","severity":1,"message":"68","line":90,"column":64,"nodeType":"69","messageId":"70","endLine":90,"endColumn":66},{"ruleId":"71","severity":1,"message":"72","line":109,"column":68,"nodeType":"73","endLine":109,"endColumn":77},{"ruleId":"74","severity":1,"message":"75","line":4,"column":10,"nodeType":"76","messageId":"77","endLine":4,"endColumn":25},{"ruleId":"74","severity":1,"message":"78","line":5,"column":10,"nodeType":"76","messageId":"77","endLine":5,"endColumn":20},{"ruleId":"79","severity":1,"message":"80","line":51,"column":28,"nodeType":"81","messageId":"82","endLine":51,"endColumn":30},{"ruleId":"83","severity":1,"message":"84","line":144,"column":21,"nodeType":"85","endLine":144,"endColumn":62},{"ruleId":"79","severity":1,"message":"80","line":39,"column":27,"nodeType":"81","messageId":"82","endLine":39,"endColumn":29},{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":68,"column":1,"nodeType":"92","endLine":70,"endColumn":2},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-unused-vars","'FontAwesomeIcon' is defined but never used.","Identifier","unusedVar","'faTrashAlt' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]